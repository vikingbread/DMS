软件的开发过程
 1) 需求分析
 2) 数据模型分析
 3) 功能分析
 4) 功能实现
 
 1) 需求分析 
    从Unix日志文件中增量读取到临时日志文件，并解析为日志记录
    将日志记录进行匹配得到成对的登入日志（包含计费时长）
    将成对的登入日志发送到DMS采集服务器
    DMS采集服务器将成对的登入日志保存到文件
    并且将文件中的数据存储到DB中。
    
  类的设计
   DMSClient DMS客户端  
   
   LogData 是值对象，是冲Unix日志中读取的行
   LogRec  是成对存在的 LogData， 主要包含登录时长信息
   
   NetService 封装了网络网络通信的细节
   Request    是网络通信请求
   Response   是网络通信反馈
   
   DMSServer DMS服务器服务器
 
 实现类: 
   com.tarena.dms.client.DMSClient
     |-- main
     |-- action() 是启动方法
     |-- initConfig() 装载配置文件
     |-- readNextLog() 读取日志文件
     |-- parseLogs() 解析日志文件
     |-- matchLogs() 匹配日志文件
     |-- sendLogs() 向服务器发送日志文件
     
   com.tarena.dms.server.DMSServer
   com.tarena.dms.bo.LogData;
   com.tarena.dms.bo.LogRec;
   com.tarena.dms.net.NetService
   com.tarena.dms.net.Request
   com.tarena.dms.net.Response
   
    
 2) 数据模型分析    
  Unix日志文件：wtmpx 文件
   临时日志文件：temp.log 是wtmpx文件的部分数据副本
   日志LogData：对象（user，time，login...）
    保存到磁盘文件：log.txt
   成对的登入日志LogRec: 对象（有一对日志组成）
   logrec.txt
   DMS采集服务器,保存到文件:server-logrec.txt
   储到DB中: SERVICE_DETAIL
   
 2.1) 日志文件格式的解析：wtmpx 文件
  1) 读取日志文件, 每次读取372byte
  2) 将372个byte按照16进制形式打印到控制台
  3) 研究372byte的格式
 
 2.2) 设计类和系统结构, 读取文件
  1) 根据日志数据格式设计类: LogData LogRec
   LogData 代表日志数据, 
      每372个byte解析为一个LogData对象
   LogRec代表日志对数据 每个 logRec对象由 一对LogData
   组成,其中一个是登入日志,一个登出日志.
  
  2) 设计系统结构
   DMSClient: 读取,解析,匹配,发送日志数据到服务器
   DMSServer: 接收,保存,存到DB
   NetService: 网络协议层,负责网络数据的发送

3) 功能分析 
 业务功能分析 与 实现
  客户端
  1) 读取日志文件
  2) 解析日志文件
  3) 匹配处理日志对数据
  4) 向服务器发送日志数据
  服务端
  5) 接收日志数据
  6) 保存日志数据
  7) 日志数据入库
  
详细分析与设计
   客户端
  1) 读取日志文件 readNextLogs()
    原始文件 wtmpx 是一个不断增长的文件
  wtmpx  
               [log row][log row][log row]...[log row][log row]...[log row]
               0     371 372      372*2       372*9   372*10      372*n
  logPosition                                         ^
  temp.log     [log row][log row][log row]...[log row]
               0     371 372      372*2       372*9                
               
  1.1) 先检查是否有    temp.log  如果有说明，上次读取的数据还没有处理完！
       （注意：临时日志数据解析完毕，一定将temp.log 文件删除）
  1.2）从文件中读取上次 logPosition的位置。
  1.3）在检查是否有新日志产生：wtmpx文件长度比 logPosition 大
  1.4) 成批复制日志数据到temp.log 最多复制10个（实际应用时候可以调整的更多）
  1.5）保存下次读取位置logPosition到文件
  1.6) 如果读取不成功一定不会产生 temp.log 文件。
  1.7）返回true表示读取成功，返回false表示读取失败。
   
 2) 解析日志文件 parseLogs()
  temp.log     [log row][log row][log row]...[log row]
               0     371 372      372*2       372*10        
  log.txt      [text log]\n[text log]\n ...  [text Log]
  2.1) 检查是否存在 log.txt 如果存在说明下一个步骤还没有处理， 就直接返回true
  2.2）检查temp.log 是否存在，如果不存在就返回false，不能处理
  2.3）逐条读取 temp.log 解析保存为log.txt 
  2.4）删除 temp.log
  2.5) 解析成功一定有 log.txt  
 
 3) 匹配处理日志对数据 matchLogRec()
     数据输入: log.txt 和  login.txt
     数据输出: login.txt 和 log-rec.txt
     其中：log-rec.txt 是用于向服务器发送的 数据 
     匹配成功以后删除掉输入数据 log.txt
  log.txt      [text log]\n[text log]\n ...  [text Log]
  
  1) 检查 log-rec.txt 是否存在，如果存在说明数据还没有发送，不进行匹配处理。
  2）检查log.txt 是否存在，如果没有，返回false
  3）读取log.txt 到集合 logs 
  4) 读取login.txt 到集合 logins 
  5) 合并 logs + logins
  6) 迭代集合，找到每个登陆日志，
  7）使用登陆日志迭代匹配登出日志，如果匹配上保存到 logRecList 
    如果未匹配，就是单条登陆记录，保存到 logins
  8) 将 logRecList 保存到 log-rec.txt 文件
  9）将logins 保存到 login.txt 文件
  10）删除 log.txt 
  
  
4) 向服务器发送日志数据  sentLogs()
   
  读取logRecFile 文件内容，向服务器发送。如果发送成功删除logRecFile文件 
   
 1) 检查是否有logRecFile 如果不存在就返回false
 2）读取文件内容到集合
 3） 连接到服务器（Socket）
 4） 创建Request 对象
 5）发送request对象
 6） 接收response 对象
 7）检查response的state值 
 8）如果是OK就删除 logRecFile 文件， 否则就返回false 

服务器端设计
 
 主线程：
 1）监听服务器端口
 2）等待客户端的连接
 3）如果有客户连接进来创建数据接收线程 LogReceiver
   并且提交到线程池执行
 4）返回（2）

  接收数据线程 LogReceiver
 1）接收用户的Request 
 2）获取用户发送过来的 LogRec集合数据
 3）推送数据到阻塞队列中 
 4）如果推送成功就发送Response（200）
 5) 如果推送不成功发送Response（500）
 
 保存数据线程
 1）从阻塞队列中拉取日志数据
 2）保存日志数据到服务器日志文件中
 3）如果日志文件存在，就把日志文件中的数据
    存储到数据库中。
 4) 数据库存储成功就删除  服务器日志文件
  
  
  
 
    
 
 
